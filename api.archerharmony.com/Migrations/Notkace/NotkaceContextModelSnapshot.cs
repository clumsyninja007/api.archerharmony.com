// <auto-generated />
using System;
using api.archerharmony.com.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace api.archerharmony.com.Migrations.Notkace
{
    [DbContext(typeof(NotkaceContext))]
    partial class NotkaceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("api.archerharmony.com.Models.Notkace.Asset", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<string>("Archive")
                        .HasColumnName("ARCHIVE")
                        .HasColumnType("enum('PENDING','COMPLETED','')");

                    b.Property<DateTime?>("ArchiveDate")
                        .HasColumnName("ARCHIVE_DATE")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ArchiveReason")
                        .HasColumnName("ARCHIVE_REASON")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<ulong?>("AssetClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ASSET_CLASS_ID")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<ulong?>("AssetDataId")
                        .HasColumnName("ASSET_DATA_ID")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<ulong?>("AssetStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ASSET_STATUS_ID")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<ulong>("AssetTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ASSET_TYPE_ID")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("0000-00-00 00:00:00");

                    b.Property<ulong?>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LOCATION_ID")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<ulong?>("MappedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MAPPED_ID")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<DateTimeOffset?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MODIFIED")
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<ulong?>("OwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OWNER_ID")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("0");

                    b.HasKey("Id");

                    b.HasIndex("AssetClassId")
                        .HasName("INDEX_CLASS_ID");

                    b.HasIndex("AssetStatusId")
                        .HasName("INDEX_ASSET_STATUS_ID");

                    b.HasIndex("Name")
                        .HasName("INDEX_NAME");

                    b.HasIndex("OwnerId")
                        .HasName("INDEX_OWNER_ID");

                    b.HasIndex("Archive", "ArchiveDate")
                        .HasName("INDEX_ARCHIVE");

                    b.HasIndex("AssetTypeId", "AssetDataId")
                        .IsUnique()
                        .HasName("INDEX_TYPE_DATA_ID");

                    b.HasIndex("AssetTypeId", "MappedId")
                        .HasName("INDEX_TYPE_MAPPED_ID");

                    b.HasIndex("AssetTypeId", "Name")
                        .HasName("INDEX_TYPE_NAME");

                    b.ToTable("ASSET");
                });

            modelBuilder.Entity("api.archerharmony.com.Models.Notkace.HdPriority", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnName("COLOR")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<ulong?>("EscalationMinutes")
                        .HasColumnName("ESCALATION_MINUTES")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<ulong>("HdQueueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HD_QUEUE_ID")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<byte?>("IsSlaEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_SLA_ENABLED")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<ulong>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ORDINAL")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<ulong?>("ResolutionDueDateMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RESOLUTION_DUE_DATE_MINUTES")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<ulong?>("SlaNotificationRecurrenceMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SLA_NOTIFICATION_RECURRENCE_MINUTES")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<byte?>("UseBusinessHoursForEscalation")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("USE_BUSINESS_HOURS_FOR_ESCALATION")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<byte?>("UseBusinessHoursForSla")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("USE_BUSINESS_HOURS_FOR_SLA")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasDefaultValueSql("0");

                    b.HasKey("Id");

                    b.HasIndex("HdQueueId")
                        .HasName("HD_QUEUE_IDX");

                    b.ToTable("HD_PRIORITY");
                });

            modelBuilder.Entity("api.archerharmony.com.Models.Notkace.HdStatus", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<ulong>("HdQueueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HD_QUEUE_ID")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<ulong>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ORDINAL")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<string>("State")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("STATE")
                        .HasColumnType("enum('opened','closed','stalled')")
                        .HasDefaultValueSql("opened");

                    b.HasKey("Id");

                    b.HasIndex("HdQueueId")
                        .HasName("HD_QUEUE_IDX");

                    b.ToTable("HD_STATUS");
                });

            modelBuilder.Entity("api.archerharmony.com.Models.Notkace.HdTicket", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<string>("Approval")
                        .HasColumnName("APPROVAL")
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("ApprovalNote")
                        .HasColumnName("APPROVAL_NOTE")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("ApproveState")
                        .HasColumnName("APPROVE_STATE")
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<ulong?>("ApproverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("APPROVER_ID")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<ulong?>("AssetId")
                        .HasColumnName("ASSET_ID")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<string>("CcList")
                        .IsRequired()
                        .HasColumnName("CC_LIST")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("0000-00-00 00:00:00");

                    b.Property<string>("CustomFieldValue0")
                        .HasColumnName("CUSTOM_FIELD_VALUE0")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("CustomFieldValue1")
                        .HasColumnName("CUSTOM_FIELD_VALUE1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("CustomFieldValue10")
                        .HasColumnName("CUSTOM_FIELD_VALUE10")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("CustomFieldValue11")
                        .HasColumnName("CUSTOM_FIELD_VALUE11")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("CustomFieldValue12")
                        .HasColumnName("CUSTOM_FIELD_VALUE12")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("CustomFieldValue13")
                        .HasColumnName("CUSTOM_FIELD_VALUE13")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("CustomFieldValue14")
                        .HasColumnName("CUSTOM_FIELD_VALUE14")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("CustomFieldValue15")
                        .HasColumnName("CUSTOM_FIELD_VALUE15")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("CustomFieldValue2")
                        .HasColumnName("CUSTOM_FIELD_VALUE2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("CustomFieldValue3")
                        .HasColumnName("CUSTOM_FIELD_VALUE3")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("CustomFieldValue4")
                        .HasColumnName("CUSTOM_FIELD_VALUE4")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("CustomFieldValue5")
                        .HasColumnName("CUSTOM_FIELD_VALUE5")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("CustomFieldValue6")
                        .HasColumnName("CUSTOM_FIELD_VALUE6")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("CustomFieldValue7")
                        .HasColumnName("CUSTOM_FIELD_VALUE7")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("CustomFieldValue8")
                        .HasColumnName("CUSTOM_FIELD_VALUE8")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("CustomFieldValue9")
                        .HasColumnName("CUSTOM_FIELD_VALUE9")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<DateTimeOffset?>("DueDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DUE_DATE")
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("0000-00-00 00:00:00");

                    b.Property<DateTimeOffset?>("Escalated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ESCALATED")
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("0000-00-00 00:00:00");

                    b.Property<ulong?>("HdCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HD_CATEGORY_ID")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<ulong?>("HdImpactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HD_IMPACT_ID")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<ulong?>("HdPriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HD_PRIORITY_ID")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<ulong>("HdQueueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HD_QUEUE_ID")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<ulong?>("HdServiceStatusId")
                        .HasColumnName("HD_SERVICE_STATUS_ID")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<ulong?>("HdStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HD_STATUS_ID")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<sbyte?>("HdUseProcessStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HD_USE_PROCESS_STATUS")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("0");

                    b.Property<byte?>("IsManualDueDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_MANUAL_DUE_DATE")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("0");

                    b.Property<byte?>("IsParent")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_PARENT")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("0");

                    b.Property<ulong?>("MachineId")
                        .HasColumnName("MACHINE_ID")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<DateTimeOffset?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MODIFIED")
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<ulong?>("OwnerId")
                        .HasColumnName("OWNER_ID")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<ulong?>("ParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PARENT_ID")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Resolution")
                        .HasColumnName("RESOLUTION")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<string>("SatisfactionComment")
                        .HasColumnName("SATISFACTION_COMMENT")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<int?>("SatisfactionRating")
                        .HasColumnName("SATISFACTION_RATING")
                        .HasColumnType("int(11)");

                    b.Property<ulong?>("ServiceTicketId")
                        .HasColumnName("SERVICE_TICKET_ID")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<DateTimeOffset?>("SlaNotified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SLA_NOTIFIED")
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("0000-00-00 00:00:00");

                    b.Property<ulong?>("SubmitterId")
                        .HasColumnName("SUBMITTER_ID")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Summary")
                        .HasColumnName("SUMMARY")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<DateTimeOffset?>("TimeClosed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TIME_CLOSED")
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("0000-00-00 00:00:00");

                    b.Property<DateTimeOffset?>("TimeOpened")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TIME_OPENED")
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("0000-00-00 00:00:00");

                    b.Property<DateTimeOffset?>("TimeStalled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TIME_STALLED")
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("0000-00-00 00:00:00");

                    b.Property<string>("Title")
                        .HasColumnName("TITLE")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("HdCategoryId")
                        .HasName("HD_CATEGORY_IDX");

                    b.HasIndex("HdImpactId")
                        .HasName("HD_IMPACT_IDX");

                    b.HasIndex("HdPriorityId")
                        .HasName("HD_PRIORITY_IDX");

                    b.HasIndex("HdQueueId")
                        .HasName("HD_QUEUE_IDX");

                    b.HasIndex("HdStatusId")
                        .HasName("HD_STATUS_IDX");

                    b.HasIndex("MachineId")
                        .HasName("MACHINE_IDX");

                    b.HasIndex("ParentId")
                        .HasName("PARENT");

                    b.HasIndex("SubmitterId");

                    b.HasIndex("OwnerId", "HdStatusId")
                        .HasName("OWNER_STATUS");

                    b.ToTable("HD_TICKET");
                });

            modelBuilder.Entity("api.archerharmony.com.Models.Notkace.HdTicketChange", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<string>("Comment")
                        .HasColumnName("COMMENT")
                        .HasColumnType("mediumtext");

                    b.Property<string>("CommentLoc")
                        .HasColumnName("COMMENT_LOC")
                        .HasColumnType("mediumtext");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("mediumtext");

                    b.Property<ulong>("HdTicketId")
                        .HasColumnName("HD_TICKET_ID")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<string>("LocalizedDescription")
                        .HasColumnName("LOCALIZED_DESCRIPTION")
                        .HasColumnType("mediumtext");

                    b.Property<string>("LocalizedOwnersOnlyDescription")
                        .HasColumnName("LOCALIZED_OWNERS_ONLY_DESCRIPTION")
                        .HasColumnType("mediumtext");

                    b.Property<byte?>("Mailed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MAILED")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime?>("MailedTimestamp")
                        .HasColumnName("MAILED_TIMESTAMP")
                        .HasColumnType("datetime(6)");

                    b.Property<uint?>("MailerSession")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MAILER_SESSION")
                        .HasColumnType("int(11) unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<string>("NotifyUsers")
                        .HasColumnName("NOTIFY_USERS")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .IsUnicode(false);

                    b.Property<byte>("OwnersOnly")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OWNERS_ONLY")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("0");

                    b.Property<string>("OwnersOnlyDescription")
                        .HasColumnName("OWNERS_ONLY_DESCRIPTION")
                        .HasColumnType("mediumtext");

                    b.Property<byte?>("ResolutionChanged")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RESOLUTION_CHANGED")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("0");

                    b.Property<byte?>("SystemComment")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SYSTEM_COMMENT")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<byte?>("TicketDataChange")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TICKET_DATA_CHANGE")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TIMESTAMP")
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("0000-00-00 00:00:00");

                    b.Property<ulong?>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("USER_ID")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<string>("ViaEmail")
                        .IsRequired()
                        .HasColumnName("VIA_EMAIL")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("HdTicketId")
                        .HasName("HD_TICKET_IDX");

                    b.HasIndex("Mailed")
                        .HasName("MAILED");

                    b.HasIndex("MailerSession")
                        .HasName("MAILER_SESSION");

                    b.HasIndex("UserId")
                        .HasName("USER_IDX");

                    b.HasIndex("Mailed", "MailerSession")
                        .HasName("MAILED_MAILER_SESSION_IDX");

                    b.HasIndex("ViaEmail", "Timestamp")
                        .HasName("VIA_EMAIL_TIMESTAMP_IDX");

                    b.ToTable("HD_TICKET_CHANGE");
                });

            modelBuilder.Entity("api.archerharmony.com.Models.Notkace.User", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<ulong?>("ApiEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("API_ENABLED")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<ulong?>("ArchivedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ARCHIVED_BY")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<DateTimeOffset?>("ArchivedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ARCHIVED_DATE")
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("0000-00-00 00:00:00");

                    b.Property<string>("BudgetCode")
                        .HasColumnName("BUDGET_CODE")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("0000-00-00 00:00:00");

                    b.Property<ulong?>("DeviceCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DEVICE_COUNT")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Domain")
                        .HasColumnName("DOMAIN")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .HasColumnName("EMAIL")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FullName")
                        .HasColumnName("FULL_NAME")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<ulong?>("HdDefaultQueueId")
                        .HasColumnName("HD_DEFAULT_QUEUE_ID")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<string>("HdDefaultView")
                        .HasColumnName("HD_DEFAULT_VIEW")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("HomePhone")
                        .HasColumnName("HOME_PHONE")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<byte?>("IsArchived")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_ARCHIVED")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("0");

                    b.Property<DateTimeOffset?>("LdapImported")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LDAP_IMPORTED")
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("0000-00-00 00:00:00");

                    b.Property<string>("LdapUid")
                        .HasColumnName("LDAP_UID")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("Level")
                        .HasColumnName("LEVEL")
                        .HasColumnType("int(11)");

                    b.Property<ulong?>("LinkedApplianceId")
                        .HasColumnName("LINKED_APPLIANCE_ID")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<ulong?>("LocaleBrowserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LOCALE_BROWSER_ID")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<ulong?>("LocationId")
                        .HasColumnName("LOCATION_ID")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<ulong?>("ManagerId")
                        .HasColumnName("MANAGER_ID")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<string>("MobilePhone")
                        .HasColumnName("MOBILE_PHONE")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTimeOffset?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MODIFIED")
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("PagerPhone")
                        .HasColumnName("PAGER_PHONE")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .HasColumnName("PASSWORD")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Path")
                        .HasColumnName("PATH")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<ulong?>("Permissions")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PERMISSIONS")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<ulong?>("PrimaryDeviceId")
                        .HasColumnName("PRIMARY_DEVICE_ID")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<ulong?>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ROLE_ID")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<ulong?>("SalesNotifications")
                        .HasColumnName("SALES_NOTIFICATIONS")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<ulong?>("SecurityNotifications")
                        .HasColumnName("SECURITY_NOTIFICATIONS")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<string>("Theme")
                        .HasColumnName("THEME")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserName")
                        .HasColumnName("USER_NAME")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("WorkPhone")
                        .HasColumnName("WORK_PHONE")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<sbyte?>("_2faConfigured")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("2FA_CONFIGURED")
                        .HasColumnType("tinyint(2)")
                        .HasDefaultValueSql("0");

                    b.Property<DateTimeOffset?>("_2faCutoffDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("2FA_CUTOFF_DATE")
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("0000-00-00 00:00:00");

                    b.Property<sbyte?>("_2faRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("2FA_REQUIRED")
                        .HasColumnType("tinyint(2)")
                        .HasDefaultValueSql("0");

                    b.Property<byte[]>("_2faSecret")
                        .HasColumnName("2FA_SECRET")
                        .HasColumnType("tinyblob");

                    b.HasKey("Id");

                    b.HasIndex("LdapUid")
                        .HasName("IDX_LDAP_UID");

                    b.HasIndex("ManagerId")
                        .HasName("IDX_PARENT");

                    b.HasIndex("Path")
                        .HasName("IDX_PATH");

                    b.HasIndex("UserName")
                        .HasName("IDX_NAME");

                    b.ToTable("USER");
                });

            modelBuilder.Entity("api.archerharmony.com.Models.Notkace.HdTicket", b =>
                {
                    b.HasOne("api.archerharmony.com.Models.Notkace.Asset", "Asset")
                        .WithMany("HdTicketsAsset")
                        .HasForeignKey("AssetId");

                    b.HasOne("api.archerharmony.com.Models.Notkace.HdPriority", "Priority")
                        .WithMany("HdTickets")
                        .HasForeignKey("HdPriorityId");

                    b.HasOne("api.archerharmony.com.Models.Notkace.HdStatus", "Status")
                        .WithMany("HdTickets")
                        .HasForeignKey("HdStatusId");

                    b.HasOne("api.archerharmony.com.Models.Notkace.Asset", "Machine")
                        .WithMany("HdTicketsMachine")
                        .HasForeignKey("MachineId");

                    b.HasOne("api.archerharmony.com.Models.Notkace.User", "Owner")
                        .WithMany("HdTicketOwner")
                        .HasForeignKey("OwnerId");

                    b.HasOne("api.archerharmony.com.Models.Notkace.User", "Submitter")
                        .WithMany("HdTicketSubmitter")
                        .HasForeignKey("SubmitterId");
                });

            modelBuilder.Entity("api.archerharmony.com.Models.Notkace.HdTicketChange", b =>
                {
                    b.HasOne("api.archerharmony.com.Models.Notkace.HdTicket", "HdTicket")
                        .WithMany("HdTicketChanges")
                        .HasForeignKey("HdTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.archerharmony.com.Models.Notkace.User", "User")
                        .WithMany("HdTicketChanges")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
